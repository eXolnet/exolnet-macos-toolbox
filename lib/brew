#!/usr/bin/env bash

function install_homebrew()
{
    command -v brew &> /dev/null

    if [[ $? -eq 0 ]]; then
        e_success "Installed homebrew"
    else
        echo
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
}

function brew_update()
{
    local formula=$@

    safe_execute "brew update" "Updated brew" "Failed to update brew"
}

function brew_outdated()
{
    local outdated=$(brew outdated --verbose)

    while IFS= read -r line; do
        e_arrow "$line"
    done <<< "$outdated"
}

function brew_upgrade_all()
{
    HOMEBREW_NO_AUTO_UPDATE=1 safe_execute "brew upgrade" "Upgraded all formulae" "Failed to upgrade all formulae"
}

function brew_upgrade()
{
    local formula=$@

    HOMEBREW_NO_AUTO_UPDATE=1 safe_execute "brew upgrade $formula" "Upgraded $formula" "Failed to upgrade $formula"
}

function brew_install()
{
    local formula=$@

    HOMEBREW_NO_AUTO_UPDATE=1 safe_execute "brew install $formula" "Installed $formula" "Failed to install $formula"
}

function brew_reinstall()
{
    local formula=$@

    HOMEBREW_NO_AUTO_UPDATE=1 safe_execute "brew reinstall $formula" "Installed $formula" "Failed to install $formula"
}

function brew_is_installed()
{
    local formula=$@

    brew ls --verbose "$formula" &> /dev/null

    return $?
}

function brew_uninstall()
{
    local formula=$@

    safe_execute "brew uninstall $formula" "Uninstalled $formula" "Failed to uninstall $formula"
}

function brew_link()
{
    local formula=$@

    safe_execute "brew link $formula" "Linked $formula" "Failed to link $formula"
}

function brew_link_force()
{
    local formula=$@

    safe_execute "brew link --overwrite --force $formula" "Linked $formula" "Failed to link $formula"
}

function brew_unlink()
{
    local formula=$@

    safe_execute "brew unlink $formula" "Unlinked $formula" "Failed to unlink $formula"
}

function brew_tap()
{
    local tap=$@

    HOMEBREW_NO_AUTO_UPDATE=1 safe_execute "brew tap $tap" "Tapped $tap" "Failed to tap $tap"
}

function brew_is_tapped()
{
    local tap=$@

    HOMEBREW_NO_AUTO_UPDATE=1 brew tap | grep -q "$tap" &> /dev/null

    return $?
}

function brew_untap()
{
    local tap=$@

    safe_execute "brew untap $tap" "Untapped $tap" "Failed to untap $tap"
}

function brew_is_status()
{
    local service=$1
    local status=$2

    brew services list | grep "^$1 " | tr -s ' ' | cut -d ' ' -f 2 | grep -q "$2"

    return $?
}

function sudo_brew_is_status()
{
    local service=$1
    local status=$2

    sudo brew services list | grep "^$1 " | tr -s ' ' | cut -d ' ' -f 2 | grep -q "$2"

    return $?
}

function brew_start()
{
    local service=$1
    local plist=$2

    safe_execute "brew services start $service $plist" "Started $service" "Failed to start $service"
}

function sudo_brew_start()
{
    local service=$1
    local plist=$2

    safe_execute "sudo brew services start $service $plist" "Started $service" "Failed to start $service"
}

function brew_stop()
{
    local service=$1

    safe_execute "brew services stop $service" "Stopped $service" "Failed to stop $service"
}

function sudo_brew_stop()
{
    local service=$1

    safe_execute "sudo brew services stop $service" "Stopped $service" "Failed to stop $service"
}

function brew_restart()
{
    local service=$1

    safe_execute "brew services restart $service" "Restarted $service" "Failed to restart $service"
}

function sudo_brew_restart()
{
    local service=$1

    safe_execute "sudo brew services restart $service" "Restarted $service" "Failed to restart $service"
}

function cask_install()
{
    HOMEBREW_NO_AUTO_UPDATE=1 _cask_install "$@"
}

function _cask_install()
{
    local formula=$1
    local force=$2
    local cmd="brew --cask install $force $formula"
    local success="Installed cask $formula"
    local failure="Failed to install cask $formula"
    local output status

    output="$($cmd 2>&1)"
    status=$?

    if [[ $status -eq 0 ]]; then
        e_success "$success"
    elif [[ "$output" =~ "Error: It seems there is already" ]]; then
        e_error "$failure, it seems this application was installed manually"
        echo

        ask_yes_no "Force install $formula?"
        status=$?

        if [[ $status -eq 0 ]]; then
            echo
            _cask_install "$formula" "--force"
        else
            e_header "Abort!"
            exit 1
        fi
    else
        e_error "$failure"
        echo "$output"
        exit 1
    fi
}
