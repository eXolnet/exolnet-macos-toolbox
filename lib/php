#!/usr/bin/env bash

PHP_ETC="$HOMEBREW_PREFIX/etc/php"

function pecl_update_channels()
{
    safe_execute "pecl update-channels" "Updated pecl channels" "Failed to update pecl channels"
}

# we have execute that in a separate function or the pipe won't work
# `yes` command is required to run in non interactive, because pecl might ask questions
function _pecl()
{
    yes '' | pecl "$@"
}

function pecl_install()
{
    local version=$1
    local package=$2
    local extra=${3:+-${3}} # if $3 is define, return "-$3"
    local file=${package}.so

    if [[ -f "$(php_get_extension_path "$version")/$file" ]]; then
        e_success "Installed $package"
    else
        pecl_reinstall "$@"
    fi
}

function pecl_reinstall()
{
    local version=$1
    local package=$2
    local extra=${3:+-${3}} # if $3 is define, return "-$3"
    local file=${package}.so

    safe_execute "_pecl install --force ${package}${extra}" "Installed $package" "Failed to install $package"

    php_copy_extension "$version" "$file"
}

function php_get_extension_path()
{
    local version=$1

    local opt_prefix=$(brew --prefix "php@$version")
    local extension_dir=$(php-config --extension-dir) # or `pecl config-get ext_dir`
    local php_basename=$(basename "$extension_dir")

    echo "$opt_prefix/lib/php/$php_basename"
}

function php_copy_extension()
{
    local version=$1
    local extension=$2

    local src="$(pecl config-get ext_dir)/$extension"
    local dest="$(php_get_extension_path "$version")/$extension"

    copy_file "$src" "$dest"
}

function php_remove_imagick_extension_from_php_ini()
{
    local version=$1
    local file="$PHP_ETC/$version/php.ini"

    /usr/bin/sed -i '' '/extension="imagick.so"/d' "$file"
}

function php_remove_pcov_extension_from_php_ini()
{
    local version=$1
    local file="$PHP_ETC/$version/php.ini"

    /usr/bin/sed -i '' '/extension="pcov.so"/d' "$file"
}

function php_remove_redis_extension_from_php_ini()
{
    local version=$1
    local file="$PHP_ETC/$version/php.ini"

    /usr/bin/sed -i '' '/extension="redis.so"/d' "$file"
}

function php_remove_xdebug_extension_from_php_ini()
{
    local version=$1
    local file="$PHP_ETC/$version/php.ini"

    /usr/bin/sed -i '' '/zend_extension="xdebug.so"/d' "$file"
}

function php_configure_timezone()
{
    local version=$1
    local file="$PHP_ETC/$version/php.ini"

    /usr/bin/sed -Ei '' 's/^;?date.timezone =.*$/date.timezone = America\/Toronto/g' "$file"
}

function php_configure_upload_max_filesize()
{
    local version=$1
    local file="$PHP_ETC/$version/php.ini"

    /usr/bin/sed -Ei '' 's/^;?upload_max_filesize =.*$/upload_max_filesize = 8M/g' "$file"
}

function php_remove_imagick_extension_insert()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-imagick.ini"

    if [[ -f $file ]]; then
        remove_insert_from_file2 "$file"
    fi
}

function php_remove_pcov_extension_insert()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-pcov.ini"

    if [[ -f $file ]]; then
        remove_insert_from_file2 "$file"
    fi
}

function php_remove_redis_extension_insert()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-redis.ini"

    if [[ -f $file ]]; then
        remove_insert_from_file2 "$file"
    fi
}

function php_remove_xdebug_extension_insert()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-xdebug.ini"

    if [[ -f $file ]]; then
        remove_insert_from_file2 "$file"
    fi
}

function php_configure_imagick()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-imagick.ini"

    remove_insert_from_file2 "$file"

cat >> "$file" <<EOL
; EXOLNET-MACOS-TOOLBOX BEGIN
[imagick]
extension="$(php_get_extension_path "$version")/imagick.so"
; EXOLNET-MACOS-TOOLBOX END
EOL
}

function php_configure_pcov()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-pcov.ini"

    remove_insert_from_file2 "$file"

cat >> "$file" <<EOL
; EXOLNET-MACOS-TOOLBOX BEGIN
[pcov]
extension="$(php_get_extension_path "$version")/pcov.so"
; EXOLNET-MACOS-TOOLBOX END
EOL
}

function php_configure_redis()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-redis.ini"

    remove_insert_from_file2 "$file"

cat >> "$file" <<EOL
; EXOLNET-MACOS-TOOLBOX BEGIN
[redis]
extension="$(php_get_extension_path "$version")/redis.so"
; EXOLNET-MACOS-TOOLBOX END
EOL
}

function php_remove_default_php_fpm_pool()
{
    local version=$1
    local file="$PHP_ETC/$version/php-fpm.d/www.conf"

    remove_file "$file"
}

function php_generate_php_fpm_pool()
{
    local version=$1
    local file="$PHP_ETC/$version/php-fpm.d/exolnet.conf"

    touch "$file"
    remove_insert_from_file2 "$file"

cat >> "$file" <<EOL
; EXOLNET-MACOS-TOOLBOX BEGIN
[exolnet]
user = $(whoami)
group = staff
listen = ${HOMEBREW_PREFIX}/var/run/php${version}-fpm.sock
listen.owner = $(whoami)
listen.group = staff
pm = ondemand
pm.max_children = 5
pm.process_idle_timeout = 120s
pm.max_requests = 500
; EXOLNET-MACOS-TOOLBOX END
EOL
}

function php_configure_xdebug()
{
    local version=$1
    local file="$PHP_ETC/$version/conf.d/exolnet-ext-xdebug.ini"

    remove_insert_from_file2 "$file"

cat >> "$file" <<EOL
; EXOLNET-MACOS-TOOLBOX BEGIN
[xdebug]
zend_extension="$(php_get_extension_path "$version")/xdebug.so"
xdebug.mode=debug
xdebug.idekey=PHPSTORM
; EXOLNET-MACOS-TOOLBOX END
EOL
}

function php_create_phpinfo()
{
    local version=$1
    local file="$HOME/Sites/${version}/index.php"

cat > "$file" <<EOL
<?php
// EXOLNET-MACOS-TOOLBOX
phpinfo();
EOL
}

function php_display_extension_status()
{
    currentversion=$(php_get_current_version)
    dotcurrentversion=$(php_convert_version_to_dot_version "$currentversion")
    confdir="$PHP_ETC/$dotcurrentversion/conf.d"

    if [[ ! -d "$confdir" ]]; then
        echo
        echo "Config directory for current php version is missing."
        exit 1
    fi

    status="\033[1m"
    status+="Extension"
    status+="\033[0m "
    status+="\033[1m"
    status+="Status"
    status+="\033[0m\n"

    for file in "$confdir"/exolnet-ext-*.ini* ; do
        filename=$(basename "$file")
        extension=$(echo "$filename" | sed 's/^exolnet-ext-\(.*\)\.ini\(.*\)*$/\1/')

        status+="\033[0m"
        status+="$extension"
        status+="\033[0m "

        if echo "$filename" | egrep -q '^exolnet-ext-(.*)\.ini$' ; then
            status+="\033[32m"
            status+="enabled"
            status+="\033[0m"
        else
            status+="\033[31m"
            status+="disabled"
            status+="\033[0m"
        fi

        status+="\n"
    done

    echo
    column -t <(echo -ne "$status")
}

function php_get_current_version()
{
    php -d display_errors=0 -r "echo 'php'.str_replace('.', '', substr(phpversion(), 0, 3));" 2> /dev/null
}

function php_convert_version_to_dot_version()
{
    case "$1" in
        php73)
            echo '7.3'
            ;;

        php74)
            echo '7.4'
            ;;

        php80)
            echo '8.0'
            ;;

        *)
            echo 'invalid'

    esac
}

function php_convert_version_to_homebrew()
{
    echo "php@$(php_convert_version_to_dot_version "$1")"
}

function brew_stop_all_php_fpm()
{
    if brew_is_installed php@7.3 ; then
        brew_is_status php@7.3 stopped || brew_stop php@7.3
    fi
    if brew_is_installed php@7.4 ; then
        brew_is_status php@7.4 stopped || brew_stop php@7.4
    fi
    if brew_is_installed php@8.0 ; then
        brew_is_status php@8.0 stopped || brew_stop php@8.0
    fi
}

function brew_unlink_all_php()
{
    brew_is_installed php@5.6 && brew_unlink php@5.6
    brew_is_installed php@7.0 && brew_unlink php@7.0
    brew_is_installed php@7.1 && brew_unlink php@7.1
    brew_is_installed php@7.2 && brew_unlink php@7.2
    brew_is_installed php@7.3 && brew_unlink php@7.3
    brew_is_installed php@7.4 && brew_unlink php@7.4
    brew_is_installed php@8.0 && brew_unlink php@8.0
}
