#!/usr/bin/env bash

HTTPD_ETC="/usr/local/etc/httpd"
HTTPD_WWW="/usr/local/var/www"
HTTPD_SSL="$HTTPD_ETC/exolnet-ssl"

function httpd_replace_listen_80()
{
    /usr/bin/sed -i '' 's/^Listen.*$/Listen 127.0.0.1:80/g' "$HTTPD_ETC/httpd.conf"
}

function httpd_replace_listen_443()
{
    /usr/bin/sed -i '' 's/^Listen.*$/Listen 127.0.0.1:443/g' "$HTTPD_ETC/extra/httpd-ssl.conf"
}

function httpd_add_include_exolnet()
{
    remove_insert_from_file "$HTTPD_ETC/httpd.conf"

cat >> "$HTTPD_ETC/httpd.conf" <<EOL
# EXOLNET-MACOS-TOOLBOX BEGIN
Include /usr/local/etc/httpd/exolnet/*.conf
Include /usr/local/etc/httpd/exolnet-vhosts/*.conf
# EXOLNET-MACOS-TOOLBOX END
EOL
}

function httpd_generate_user_conf()
{
    remove_insert_from_file "$HTTPD_ETC/exolnet/user.conf"

cat >> "$HTTPD_ETC/exolnet/user.conf" <<EOL
# EXOLNET-MACOS-TOOLBOX BEGIN
<IfModule unixd_module>
    User $(whoami)
    Group staff
</IfModule>
# EXOLNET-MACOS-TOOLBOX END
EOL
}

function httpd_create_include_php()
{
    local slug=$1
    local file="$HTTPD_ETC/exolnet-include/$slug.conf"

    create_file "$file"
}

function httpd_generate_include_php()
{
    local version=$1
    local slug=$2
    local file="$HTTPD_ETC/exolnet-include/$slug.conf"

    remove_insert_from_file "$file"

cat >> "$file" <<EOL
# EXOLNET-MACOS-TOOLBOX BEGIN
<Directory /usr/local/var/www/${slug}>
    Include ${HTTPD_ETC}/exolnet-php-fpm/php${version}-fpm.conf
</Directory>
# EXOLNET-MACOS-TOOLBOX END
EOL
}

function httpd_enable_mpm_event_module()
{
    /usr/bin/sed -i '' 's/^#\(LoadModule mpm_event_module .*\)$/\1/g' "$HTTPD_ETC/httpd.conf"
}

function httpd_disable_mpm_prefork_module()
{
    /usr/bin/sed -i '' 's/^\(LoadModule mpm_prefork_module .*\)$/#\1/g' "$HTTPD_ETC/httpd.conf"
}

function httpd_disable_php_module()
{
    /usr/bin/sed -i '' 's/^\(LoadModule php[578]_module .*\)$/#\1/g' "$HTTPD_ETC/httpd.conf"
}

function httpd_chown_cellar_path()
{
    sudo chown -R "$(whoami):staff" "$(brew --cellar httpd)"
}

function mkcert_install_local_ca()
{
    mkcert -install
}

function mkcert_generate_ssl_certificate()
{
    mkcert -cert-file "$HTTPD_SSL/localhost/fullchain.pem" -key-file "$HTTPD_SSL/localhost/privkey.pem" localhost ssl.localhost "*.ssl.localhost"
}
