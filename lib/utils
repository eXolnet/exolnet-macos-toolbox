#!/usr/bin/env bash

MIGRATIONS_DIR="$TOOLBOX/migrations"
STORAGE_MIGRATIONS_DIR="$TOOLBOX/storage/migrations"

function e_header()
{
    echo -e "\n$INDENT\033[1m$@\033[0m"
}

function e_success()
{
    echo -e "$INDENT \033[1;32m✔\033[0m $@"
}

function e_error()
{
    echo -e "$INDENT \033[1;31m✖\033[0m $@"
}

function e_arrow()
{
    echo -e "$INDENT \033[1;34m➜\033[0m $@"
}

function ask_yes_no()
{
    local question=$1
    local prompt=" [y/n] "
    local value=

    while true; do
        echo -ne "\033[33m$question$prompt\033[0m"
        read -p "" -r
        case "$REPLY" in
            y*|Y*)
                value=0
                break
                ;;
            n*|N*)
                value=1
                break
                ;;
            *)
                echo 'Please respond with `yes` or `no`.'
                ;;
        esac
    done

    return $value
}

function ask_question_with_default()
{
    local question=$1
    local default=$2
    local prompt=" [$default] "
    local value=

    echo -ne "\033[33m$question$prompt\033[0m"
    read -p "" -r
    case "$REPLY" in
        "")
            REPLY="$default"
            ;;
    esac

    # Result is available in $REPLY variable
}

function safe_execute()
{
    local cmd=$1
    local success=$2
    local failure=$3
    local e_function=${4:-e_success}
    local output status

    output="$($cmd 2>&1)"
    status=$?

    if [[ $status -eq 0 ]]; then
        $e_function "$success"
    else
        e_error "$failure"
        echo -e "$output"

        if [[ "$TOOLBOX_DISPLAY_FAT_ERROR" == "1" ]]; then
            echo
            echo -e "$INDENT \033[41m                                                  \033[0m"
            echo -e "$INDENT \033[41m  Whoops, looks like something went wrong!        \033[0m"
            echo -e "$INDENT \033[41m                                                  \033[0m"
            echo -e "$INDENT \033[41m  Please, check the output above, fix all issues  \033[0m"
            echo -e "$INDENT \033[41m  and then run your last command again.           \033[0m"
            echo -e "$INDENT \033[41m                                                  \033[0m"
        fi

        exit 1
    fi
}

function backup_file()
{
    local file=$1
    local dest

    # Set backup flag, so a nice message can be shown at the end
    BACKUP=true
    # Create backup dir if it doesn't already exist
    [[ -e "$BACKUP_DIR" ]] || safe_execute "mkdir -p $BACKUP_DIR" "Created $BACKUP_DIR directory" "Failed to create $BACKUP_DIR directory" "e_arrow"
    # Avoid collision if we backup twice the same file
    dest="$BACKUP_DIR/$(date "+%H%M%S")"
    # Create sub backup dir if it doesn't already exist
    [[ -e "$dest" ]] || safe_execute "mkdir -p $dest" "Created $dest directory" "Failed to create $dest directory" "e_arrow"

    safe_execute "mv $file $dest" "Backed up $file" "Failed to backup $file" "e_arrow"
}

function backup_copy_file()
{
    local file=$1
    local dest

    # Set backup flag, so a nice message can be shown at the end
    BACKUP=true
    # Create backup dir if it doesn't already exist
    [[ -e "$BACKUP_DIR" ]] || safe_execute "mkdir -p $BACKUP_DIR" "Created $BACKUP_DIR directory" "Failed to create $BACKUP_DIR directory" "e_arrow"
    # Avoid collision if we backup twice the same file
    dest="$BACKUP_DIR/$(date "+%H%M%S")"
    # Create sub backup dir if it doesn't already exist
    [[ -e "$dest" ]] || safe_execute "mkdir -p $dest" "Created $dest directory" "Failed to create $dest directory" "e_arrow"

    safe_execute "cp -a $file $dest" "Backed up $file" "Failed to backup $file" "e_arrow"
}

function backup_file_if_exists()
{
    local file=$1

    [[ -e "$file" ]] && backup_file "$file"
}

function create_directory()
{
    local directory=$1

    if [[ -e "$directory" && ! -d "$directory" ]]; then
        e_error "File $directory exists but is not a directory, exiting ..."
        exit 1
    else
        safe_execute "mkdir -p $directory" "Created $directory directory" "Failed to create $directory directory"
    fi
}

function sudo_create_directory()
{
    local directory=$1

    if [[ -e "$directory" && ! -d "$directory" ]]; then
        e_error "File $directory exists but is not a directory, exiting ..."
        exit 1
    else
        safe_execute "sudo mkdir -p $directory" "Created $directory directory" "Failed to create $directory directory"
    fi
}

function create_file()
{
    local file=$1

    if [[ -e "$file" && ! -f "$file" ]]; then
        e_error "File $file exists but is not a file, exiting ..."
        exit 1
    else
        safe_execute "touch $file" "Created $file file" "Failed to create $file file"
    fi
}

function link_file()
{
    local src=$1
    local dest=$2

    if [[ -e "$dest" && ! -L "$dest" ]]; then
        backup_file "$dest"
    fi

    safe_execute "ln -sfn $src $dest" "Linked $dest -> $src" "Failed to link $dest -> $src"
}

function copy_file()
{
    local src=$1
    local dest=$2

    if [[ -e "$dest" ]]; then
        e_error "File $dest exists"
    else
        safe_execute "cp $src $dest" "Copied $src -> $dest" "Failed to copy $src -> $dest"
    fi
}

function move_file()
{
    local src=$1
    local dest=$2

    if [[ -e "$dest" ]]; then
        e_error "File $dest exists"
    else
        safe_execute "mv $src $dest" "Moved $src -> $dest" "Failed to move $src -> $dest"
    fi
}

function remove_file()
{
    local file=$1

    safe_execute "rm -f $file" "Removed $file" "Failed to remove $file"
}

function chmod_execute_file()
{
    local file=$1

    safe_execute "chmod +x $file" "Changed $file mode" "Failed to change $file mode"
}

function process_recursive()
{
    local action=$1
    local files=($2/*)
    local parent=$3

    for file in "${files[@]}"; do
        local base=$(basename "$file")
        local dest="$parent/$base"

        if [[ -d "$file" ]]; then
            create_directory "$dest"
            process_recursive "$action" "$file" "$dest"
        else
            "$action" "$file" "$dest"
        fi
    done
}

function generate_jinja2_file()
{
    local src=$1
    local dest=$2

    safe_execute "_generate_jinja2_file $src $dest" "Generated $src -> $dest" "Failed to generate $src -> $dest"
}

function _generate_jinja2_file()
{
    local src=$1
    local dest=$2

    jinja2 --strict -D HOMEBREW_PREFIX="$HOMEBREW_PREFIX" "$src" > "$dest"
}

function remove_insert_from_file()
{
    local file=$1

    # See: https://nixtricks.wordpress.com/2013/01/09/sed-delete-the-lines-lying-in-between-two-patterns/
    /usr/bin/sed -i '' '/# EXOLNET-MACOS-TOOLBOX BEGIN/,/# EXOLNET-MACOS-TOOLBOX END/d' "$file"
}

function remove_insert_from_file2()
{
    local file=$1

    # See: https://nixtricks.wordpress.com/2013/01/09/sed-delete-the-lines-lying-in-between-two-patterns/
    /usr/bin/sed -i '' '/; EXOLNET-MACOS-TOOLBOX BEGIN/,/; EXOLNET-MACOS-TOOLBOX END/d' "$file"
}

function waiting_for()
{
    local seconds=$1

    echo -n -e "$INDENT \033[1m?\033[0m Waiting for $seconds seconds "
    for ((i=0; i<"$seconds"; i++)) ; do
        echo -n '.' && sleep 1
    done
    echo -e "\r$INDENT \033[1;32m✔\033[0m "
}

function clear_extended_attributes()
{
    local file=$1

    xattr -cr "$file"
}

function toolbox_reload()
{
    unset TOOLBOX_LIB_INCLUDED
    TOOLBOX_NO_HEADER=true

    . "$TOOLBOX/lib/include"

    e_success "Reloaded toolbox helpers"
}
