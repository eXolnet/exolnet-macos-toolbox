#!/usr/bin/env bash

#
# Script setup
#

# Define toolbox directory if not set
if [[ -z "$TOOLBOX" ]]; then
    TOOLBOX="$HOME/.exolnet/toolbox"
fi

# Check if toolbox directory exists
if [[ ! -d "$TOOLBOX" ]]; then
    echo "Directory ~/.exolnet does not exists, exiting ..."
    exit 1
fi

# Source helpers
. "$TOOLBOX/lib/include"

#
# Script checks
#

# Check if homebrew shell environment variables are defined
#if [[ -z "$HOMEBREW_PREFIX" ]]; then
#    echo
#    echo "Homebrew environment variables are missing."
#    echo "They must be present in your shell profile in order for this script to run."
#    exit 1
#fi

# Check if command was ran as root.
if [[ $(id -u) -eq 0 ]]; then
    echo
    echo "The command \"$(basename "$0")\" should not be executed as root or via sudo directly."
    echo "When a command requires root access, you will be prompted for a password as needed."
    exit 1
fi

#
# Script execution
#

if [[ ! -d "$STORAGE_MIGRATIONS_DIR" ]]; then
    e_header "Warming up"
    create_directory "$STORAGE_MIGRATIONS_DIR"
fi

# Skip previous migrations so that everyone starts at the same place
MIGRATIONS=$(ls $MIGRATIONS_DIR/2018* $MIGRATIONS_DIR/2019_0[12]* 2> /dev/null)
MIGRATED=
if [[ "$MIGRATIONS" ]]; then
    for migration in $MIGRATIONS; do
        migration=$(basename "$migration")
        if [[ ! -e "$STORAGE_MIGRATIONS_DIR/$migration" ]]; then
            if [[ ! "$MIGRATED" ]]; then
                e_header "Skipping migrations"
            fi
            touch "$STORAGE_MIGRATIONS_DIR/$migration"
            e_success "Marked migration $migration as already applied"
            MIGRATED=true
        fi
    done
fi

MIGRATIONS=$(ls $MIGRATIONS_DIR 2> /dev/null)
MIGRATED=
for migration in $MIGRATIONS; do
    if [[ ! -e "$STORAGE_MIGRATIONS_DIR/$migration" ]]; then
        echo -e "\n\033[33mMigrating:\033[0m $migration"

        INDENT="   "
        . "$MIGRATIONS_DIR/$migration"
        INDENT=

        echo -e "\n\033[32mMigrated:\033[0m  $migration"

        touch "$STORAGE_MIGRATIONS_DIR/$migration"
        MIGRATED=true
    fi
done

# Display if backups were made
if [[ "$BACKUP" == true ]]; then
    e_header "Backups"
    e_arrow "Existing files were moved to $BACKUP_DIR"
fi

if [[ "$MIGRATED" == true ]]; then
    e_header "All done!"
else
    e_header "Nothing to migrate."
fi
