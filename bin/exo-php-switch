#!/usr/bin/env bash

#
# Script setup
#

# Define eXolnet directory if not set
if [ -z "$EXOLNET" ]; then
    EXOLNET="$HOME/.exolnet"
fi

# Check if eXolnet directory exists
if [ ! -d "$EXOLNET" ]; then
    echo "Directory ~/.exolnet does not exists, exiting ..."
    exit 1
fi

# Source helpers
. $EXOLNET/lib/header
. $EXOLNET/lib/utils
. $EXOLNET/lib/brew
. $EXOLNET/lib/httpd
. $EXOLNET/lib/php

#
# Script checks
#

# Check if command was ran as root.
if [[ $(id -u) -eq 0 ]]; then
    echo
    echo "The command \"`basename \"$0\"`\" should not be executed as root or via sudo directly."
    echo "When a command requires root access, you will be prompted for a password as needed."
    exit 1
fi

# Usage
if [ $# -ne 1 ]; then
    first=true

    brew list | egrep '^php(@[0-9.]{3,})?$' | sed 's/^php$/php@7.2/g' | sort | grep -o -E '[0-9.]+' | while read -r line ; do
        if [ "$first" = true ]; then
            echo
            echo -n "Usage: exo-php-switch ["
        else
            echo -n "|"
        fi

        echo -n "$line"
        first=false
    done

    echo "]"
    exit 1
fi

#
# Script execution
#

currentversion="$(php_get_current_version)"
newversion="php$(echo $1 | tr -cd [:digit:])"

brewcurrentversion="$(php_convert_version_to_homebrew $currentversion)"
brewnewversion="$(php_convert_version_to_homebrew $newversion)"

e_header "Switching php version"

safe_execute "brew list $brewnewversion" "Found $brewnewversion" "Failed to find $brewnewversion"
brew_unlink $brewcurrentversion
brew_link_force $brewnewversion
link_file "$EXOLNET/conf/httpd_php/$newversion.conf" "$HTTPD_ETC/exolnet/php.conf"
sudo_brew_restart httpd

e_header "All done!"
