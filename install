#!/usr/bin/env bash

#
# Basic setup
#

# Define toolbox directory if not set
if [ -z "$TOOLBOX" ]; then
    TOOLBOX="$HOME/.exolnet/toolbox"
fi

# Check if toolbox directory exists
if [ ! -d "$TOOLBOX" ]; then
    echo "Directory ~/.exolnet does not exists, exiting ..."
    exit 1
fi

# Source helpers
. "$TOOLBOX/lib/include"

#
# Script checks
#

# Check if homebrew shell environment variables are defined
if [[ -z "$HOMEBREW_PREFIX" ]]; then
    echo
    echo "Homebrew environment variables are missing."
    echo "They must be present in your shell profile in order for this script to run."
    exit 1
fi

# Check if command was ran as root.
if [[ $(id -u) -eq 0 ]]; then
    echo
    echo "The command \"$(basename "$0")\" should not be executed as root or via sudo directly."
    echo "When a command requires root access, you will be prompted for a password as needed."
    exit 1
fi

#
# Script execution
#

# Mark that we were here
MAIN_INSTALL_SCRIPT=true

# Command Line Tools and Homebrew are installed in bootstrap script

e_header "Installing dependencies"
brew_install dialog

e_header "Installing scripts"
process_recursive "link_file" "$TOOLBOX/bin" "/usr/local/bin"

e_header "Configuring system preferences"
safe_execute "increase_sudo_timeout" "Increased sudo timeout to 60 minutes" "Failed to increase sudo timeout to 60 minutes"
safe_execute "enable_sudo_touch_id" "Enabled touch id support for sudo" "Failed to enable touch id support for sudo"
safe_execute "enable_require_password" "Enabled require password after sleep" "Failed to enable require password after sleep"
safe_execute "set_require_password_to_immediately" "Set require password to immediately" "Failed to set require password to immediately"
safe_execute "enable_full_keyboard_access" "Enabled full keyboard access" "Failed to enable full keyboard access"
safe_execute "enable_show_all_file_name_extensions" "Enabled show all file name extensions" "Failed to enable show all file name extensions"

e_header "Creating storage directories"
create_directory "$STORAGE_PREFERENCES_DIR"
create_directory "$STORAGE_MIGRATIONS_DIR"

e_header "Skipping migrations"
MIGRATIONS=$(ls "$MIGRATIONS_DIR" 2> /dev/null)
for migration in $MIGRATIONS; do
    if [ ! -e "$STORAGE_MIGRATIONS_DIR/$migration" ]; then
        touch "$STORAGE_MIGRATIONS_DIR/$migration"
        e_success "Marked migration $migration as already applied"
    fi
done

. "$TOOLBOX/bin/exo-software-select"
. "$TOOLBOX/bin/exo-software-install"
